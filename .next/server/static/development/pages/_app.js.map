{"version":3,"file":"static/development/pages/_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/_app.js","webpack:///./store.js","webpack:///./utils/localStorage.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"mobx\"","webpack:///external \"mobx-react\"","webpack:///external \"mobx-react-devtools\"","webpack:///external \"next/app\"","webpack:///external \"react\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","//Persisting layout between page changes\n//Keeping state when navigating pages\n//Custom error handling using componentDidCatch\n//Inject additional data into pages (for example by processing GraphQL queries)\nimport React from 'react'\nimport DevTools from 'mobx-react-devtools'\nimport { initializeStore } from '../store'\nimport { Provider } from 'mobx-react'\nimport App, { Container } from 'next/app'\nimport { createGlobalStyle } from 'styled-components'\n\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    font-family: helvetica;\n    text-align: center;\n    line-height: 1.5;\n    h1 {\n        font-size: 42px;\n        font-weight: 100;\n        letter-spacing: 2px;\n        text-transform: uppercase;\n    }\n    h2 {\n        margin: 16px auto;\n        font-size: 32px;\n        font-weight: 100;\n        letter-spacing: 2px;\n        text-transform: uppercase;\n    }\n    h3 {\n        margin: 16px auto;\n        font-size: 24px;\n        font-weight: 100;\n        letter-spacing: 2px;\n        text-transform: uppercase;\n    }\n    p {\n        margin: 0;\n        font-size: 18px;\n    }\n    ul, li, a {\n        text-decoration: none;\n        list-style-type: none;\n    }\n    button:focus {\n        outline: 0;\n    }\n  }\n`;\n\n\nexport default class MyApp extends App {\n  static async getInitialProps({ Component, router, ctx }) {\n    // Get or Create the store with `undefined` as initialState\n    // This allows you to set a custom default initialState\n    const mobxStore = initializeStore()\n\n    // Provide the store to getInitialProps of pages\n    let pageProps = {}\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n    return {\n      pageProps,\n      initialMobxState: mobxStore\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    const isServer = !process.browser;\n    this.mobxStore = isServer\n      ? props.initialMobxState\n      : initializeStore(props.initialMobxState)\n  }\n\n  render () {\n    const { Component, pageProps } = this.props\n    return (\n      <Container>\n        <GlobalStyle />\n        <DevTools />\n        <Provider store={this.mobxStore}>\n          <Component {...pageProps} />\n        </Provider>\n      </Container>\n    )\n  }\n}\n","\nimport { action, observable, computed, autorun } from 'mobx'\nimport { useStaticRendering } from 'mobx-react'\nimport { saveItemToLocalStorage, updateItemListToLocalStorage } from './utils/localStorage'\n\n\nconst isServer = !process.browser\nuseStaticRendering(isServer)\n\n\nclass Store {\n    @observable cart = []\n\n    constructor(isServer, initialData = {}) {\n        //this.cart = !!initialData.cart\n        this.cart\n    }\n\n    @action setCart = (cartFromLocalStorage) => {\n        this.cart = cartFromLocalStorage\n    }\n\n    @action addCart = (product) => {\n        const foundInCart = this.cart.some((item) => {\n            return item.title === product.title\n        });\n\n        if (foundInCart) {\n            const newCart = this.cart.map((item) => {\n                if (item.title === product.title) {\n                    return {\n                        ...item,\n                        quantity: item.quantity +1\n                    }\n                }\n                return item\n            });\n            this.cart = newCart\n            updateItemListToLocalStorage(newCart, 'cartArray')\n        }\n        else {\n            this.cart.push(product)\n            saveItemToLocalStorage(product, 'cartArray')\n        }\n    }\n\n\n    @computed get cartCount() {\n        return this.cart.length\n    }\n}\n\nlet store = null\n\n\nexport function initializeStore(initialData) {\n    // Always make a new store if server, otherwise state is shared between requests\n    if (isServer) {\n        return new Store(isServer, initialData)\n    }\n    if (store === null) {\n        store = new Store(isServer, initialData)\n    }\n    return store\n}\n\n\n","export function saveItemToLocalStorage(product, listName) {\n    let cartArray = getItemListFromLocalStorage(listName)\n    if (cartArray) {\n        cartArray.push(product)\n    }\n    localStorage.setItem(listName, JSON.stringify(cartArray));\n}\n\nexport function updateItemListToLocalStorage(productList, listName) {\n    let cartArray = getItemListFromLocalStorage(listName)\n    cartArray = productList\n    localStorage.setItem(listName, JSON.stringify(cartArray));\n}\n\nexport function getItemListFromLocalStorage(listName) {\n    const storedToDoList = JSON.parse(localStorage.getItem(listName));\n    return storedToDoList || [];\n}\n\n\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"mobx\");","module.exports = require(\"mobx-react\");","module.exports = require(\"mobx-react-devtools\");","module.exports = require(\"next/app\");","module.exports = require(\"react\");","module.exports = require(\"styled-components\");"],"mappingsxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAuCA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;AACA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAMA;AACA;;;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAKA;;;;AApCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AAGA;AACA;AAGA;;;AAGA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;;;AA8BA;AACA;AACA;;;;AAtCA;;;;;AAAA;;AAOA;;;;;;;AAAA;AACA;AACA;;AAEA;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;;AAGA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}